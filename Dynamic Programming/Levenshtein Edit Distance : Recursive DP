Source : https://www.youtube.com/watch?v=AuYujVj646Q 

Given two strings str1 and str2 and below operations that can performed on str1. Find minimum number
of edits (operations) required to convert ‘str1’ into ‘str2’.  
Insert
Remove
Replace
What are the subproblems in this case? 

If last characters of two strings are same, nothing much to do. Ignore last characters and get count for remaining strings. 
So we recur for lengths m-1 and n-1.

Else (If last characters are not same), we consider all operations on ‘str1’, consider all three operations on last character 
of first string, recursively compute minimum cost for all three operations and take minimum of three values.

Insert: Recur for m and n-1
Remove: Recur for m-1 and n
Replace: Recur for m-1 and n-1



#include<bits/stdc++.h>
#define ll long long
#define pb push_back
using namespace std;

const int mx = 1e3+5;
string s , p ;

int dp[ mx ][ mx ];

int mindist ( int i , int  j ) {

    if(i == -1 ) return j+1 ;
    if(j == -1 ) return i+1 ;

    if(dp[i][j] != -1 ) return dp[i][j] ;
    
    if( s[i] == p[j] ) 
        return dp[i][j] = mindist(i-1,j-1) + 0 ;
    else
        return dp[i][j] = min ( min ( mindist(i,j-1)+1 , mindist(i-1,j)+1 ), mindist(i-1,j-1)+1 ) ;

}


int main(){

    cin >> s >>  p ;

    int d1 = s.size() - 1  , d2 = p.size() - 1  ;

    memset( dp , -1 , sizeof( dp ) ) ;

    int ans = mindist ( d1 , d2) ;

    cout << ans << endl;

return 0;
}

/*
intention
execution
sunday
saturday
sunday
*/
