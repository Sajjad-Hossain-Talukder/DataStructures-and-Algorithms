/*

x =  ( âˆ‘ (rem[i]*prod_div_num[i]*mod_inv[i]) ) % prod
   Where 0 <= i <= n-1

rem[i] --> is given array of remainders

prod --> is product of all given numbers
prod = num[0] * num[1] * ... * num[k-1]

 prod_div_num[i] --> is product of all divided by num[i]
 prod_div_num[i] = prod / num[i]

mod_inv[i] = Modular Multiplicative Inverse of 
         prod_div_num[i] with respect to num[i]

Let us take below example to understand the solution
   num[] = {3, 4, 5}, rem[] = {2, 3, 1}
   prod  = 60 
   prod_div_num[]  = {20, 15, 12}
   inv[] = {2,  3,  3}  // (20*2)%3 = 1, (15*3)%4 = 1
                        // (12*3)%5 = 1

   x = (rem[0]* prod_div_num[0]*mod_inv[0] + rem[1]* prod_div_num[1]*mod_inv[1] + 
        rem[2]* prod_div_num[2]*mod_inv[2]) % prod
     = (2*20*2 + 3*15*3 + 1*12*3) % 60
     = (80 + 135 + 36) % 60
     = 11

*/
#include<bits/stdc++.h>
#define ll long long
#define pb push_back
using namespace std;

int egcd( int a , int b , int &x , int &y){
        if(b==0){
            x = 1 ;
            y = 0 ;
            return a;
        }
        int x1,y1,d;
        d = egcd(b,a%b,x1,y1);
        x = y1 ;
        y = x1 - (a/b)*y1;
            return d;
}

int main(){
    int n;
    cin>>n;
    int num[n] , rem[n] , prod_div_num[n] , mod_inv[n] , prod = 1 ;
    
    for(int i = 0 ; i<n ; i+=1){
        cin>>num[i];
        prod*=num[i];
    }
    
    for(int i = 0 ; i<n ; i+=1) 
        cin>>rem[i];

    for(int i = 0 ; i<n ; i+=1){
        prod_div_num[i]  = prod/num[i];
    }
    
    for(int i = 0 ; i<n ; i+=1){
            int x,y;
            y = egcd(prod_div_num[i] ,  num[i] ,x,y);
            if(x<0) x =( x%num[i] + num[i] )% num[i];
        mod_inv[i] =x;
    }

    int ans = 0 ;

    for(int i = 0 ;i<n ; i+=1) {
        ans+=(rem[i]*prod_div_num[i]*mod_inv[i]);
    }
    ans %= prod ;
    cout<<ans<<endl;


return 0;
}
