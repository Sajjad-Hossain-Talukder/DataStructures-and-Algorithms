Explanation : https://www.youtube.com/watch?v=eCG3T1m7rFY
Just do DFS and send its parent at the same time . Find any back edge .

if any back edge is found then there is at least a cycle avilable. How would i detect a 
back edge ? 

if( a particular node is already visited ,then its parent is fixed . If we found another node , who also could be  a parent then 
this edge between those two node is a back edge And there is a cycle . For more explanation , checkout the video and code  .
-----------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
#define ll long long
#define pb push_back
using namespace std;

vector<int> graph[1000];
int visited[1000];
bool cycle = false ;

              void dfs(int n , int parent){
                  if(visited[n]) return ;
                  visited[n] = true ;

                  for(int a : graph[n] ){
                      if(visited[a]){
                          if(a!=parent){
                              cycle = true ;
                          }
                      }
                      else dfs(a,n);
                  }
              }

int main(){
        int node,edge,x,y;
            cin>>node>>edge;
            for(int i = 1 ; i<= edge ; i++ ){
                cin>>x>>y;
                graph[x].pb(y);
                graph[y].pb(x);
            }

        int parent = -1 ;
            for(int i = 0 ;i<node ; i++ ){
                dfs(i,parent);
                if(cycle) break;
            }

             if(cycle) cout<<"Yes"<<endl;
             else cout<<"NO"<<endl;

return 0;
}
/*
5 5
0 1
1 2
2 3
1 3
3 4
*/
