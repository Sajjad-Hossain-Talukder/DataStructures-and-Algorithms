                                                  #include<bits/stdc++.h>
                                                  #define ll long long
                                                  #define pb push_back
                                                  using namespace std;
                                                  int source ;

                                                  struct gp{
                                                      int p ;
                                                      int q ;
                                                      int c ;
                                                  };



                                                  int main(){
                                                      int node, edge , x , y , c;
                                                      cin >> node >> edge ;
                                                      vector< gp > adj;

                                                      for( int i = 1 ; i <= edge ; i++ ){
                                                          cin >> x >> y >> c;
                                                          adj.pb({x,y,c});
                                                      }

                                                      cin >> source ;

                                                      ll dist[node+5] , temp_dist[node+5] ;
                                                      fill(dist , dist+node+5 , INT_MAX) ;

                                                      dist[source] = 0 ;

                                                      for ( int i = 1 ; i <= node ; i++ ){

                                                          for ( gp a : adj ){
                                                              if( dist[a.q] > dist[a.p]+a.c ){
                                                                  dist[a.q] = dist[a.p]+a.c ;
                                                                  parent[a.q] = a.p ;
                                                              }
                                                          }

                                                          if ( i == node-1 ){
                                                              for ( int  j = 1 ; j <= node ; j++ )
                                                                  temp_dist[j] = dist[j] ;
                                                          }

                                                      }

                                                      bool fg = true ;
                                                      for ( int i = 1 ; i <= node ; i++ ){
                                                          if ( temp_dist[i] != dist[i] ){
                                                              fg = false ;
                                                              }
                                                      }

                                                      if ( fg ) {
                                                          cout<<"No Negative cycle\n";
                                                      }
                                                      else cout<<"Cycle Detected\n";




                                                  return 0;
                                                  }

