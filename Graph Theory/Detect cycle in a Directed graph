Source : https://www.youtube.com/watch?v=0dJmTuMrUZM

Short Description :
-------------------
we use Adjacency list here to present a graph . Because of directed graph , 
we use one push_back statement here on code  . 

Here , we use a visited[] array to tract a node whether it is visited or not .
Every time we start a dfs() operation and mark visited[] as true . If we don't 
get another visited[] = true node , then there is no cycle . So we have to move on 
next node .For make it easier to detect we mark all visited[] = true node again false
at the end of dfs .

If we get a visited[] = true at the beginnning of dfs , then we change the value of
cycle and stop checking .

Checkout the Code carefullY :
-----------------------------
          #include<bits/stdc++.h>
          #define ll long long
          #define pb push_back
          using namespace std;

          vector<int>graph[1000];
          bool visited[1000];
          bool cycle = false ;

              void dfs( int n ){
                  if( visited[n] ){
                      cycle = true ;
                      return ;
                  }
                  visited[n] = true ;
                  for(int a : graph[n]){
                      dfs(a);
                  }
                  visited[n] = false ;
              }

          int main(){

              int node , edge , x, y;
              cin>>node>>edge;

              for(int i = 1 ; i<= edge ; i++){
                  cin>>x>>y;
                  graph[x].pb(y);
              }

              for(int i = 0 ; i<node ; i++){
                 dfs(i);
                 if(cycle){
                  cout<<"cycle detected"<<endl;
                  cout<<i<<endl;
                  break;
                 }
              }
              if(! cycle ){
                  cout<<"There is no Cycle "<<endl;
              }

          return 0;
          }
/*
5 6
0 1
2 1
4 0
4 2
2 3
3 4
===
4 5
1 2
2 3
2 4
3 4
4 1
===
3 3
1 2
1 3
2 3


*/
