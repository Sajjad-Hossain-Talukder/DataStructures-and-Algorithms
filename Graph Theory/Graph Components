The Connected part of a graph is called its Components. If a graph has there differnet connected part then ,
it has three components.
it actually represents as a three set of nodes .
In this program , we use normal DFS program . Everytime when we use a dfs for each node , we use a extra vector 
array to store connected components .

Checkout code :
---------------
        #include<bits/stdc++.h>
        #define ll long long
        #define pb push_back
        using namespace std;
        vector<int>graph[1000],components[1000];
        bool visited[1000];
        int level[1000] , parent[1000];

        void dfs( int n , int t){
          if(visited[n]) return ;
          components[t].pb(n);
          visited[n] = 1;
          for(auto a : graph[n]){
            if(!visited[a]){
              dfs(a,t);
            }
          }
        }

        int main(){
            int node,edge ,x,y,d;
            cin>>node>>edge;
            for(int i = 0 ; i< edge ; i+=1){
              cin>>x>>y;
              graph[x].pb(y);
              graph[y].pb(x);
            }
            
            int t = 1;
            for(int i = 1 ; i<=node ; i+=1){
              dfs(i,t); // calling dfs
              t+=1;
            }
            
            int cnt = 0 ;
            vector<int>tm;

            for(int i = 1 ; i<=node ;  i+=1){
              if( components[i].size()) {
                cnt+=1;
                tm.pb(i);
              }
            }

            cout<<"Total components : "<<cnt<<"\nAnd they are : "<<endl;
            for( int i = 0 ; i<cnt ; i++ ){
              for(auto a : components[tm[i]])
                cout<<a<<" ";cout<<endl;
            }
            return 0;
        }
smaple input : 
                8 8
                1 2
                1 3
                2 3
                4 5
                4 6
                5 7
                6 7
                8 8
sample output : 
                Total components : 3
                And they are : 
                1 2 3 
                4 5 7 6 
                8 
