                    #include<bits/stdc++.h>
                    #define ll long long
                    #define pb push_back
                    using namespace std;

                    const ll INF = 1e16;
                    void path_print ( int par[] , int n ){
                            if(par[n] == -1 ) return ;
                            path_print(par,par[n]);
                            cout<<par[n]<<" ";
                    }

                    int main(){
                        int node , edge , x , y , c , nd , cst ;
                        cin>>node>>edge;

                        vector< pair<int,int> >adj [node+5] ;

                        for( int i = 1 ; i <= edge ; i++ ){
                            cin >> x >> y >> c;
                            adj[x].pb( { y , c });
                            adj[y].pb( { x , c });
                        }

                        ll dist[node+5];
                        int par[node+5];

                        fill(dist, dist+node+5 , INF);

                        bool visited[node+5];
                        fill(visited,visited+node+5,0);

                        set < pair<int,int> > s ;

                        s.insert({ 0 , 1 });
                        par[1] = -1;



                        while( !s.empty()){
                           auto a = s.begin();

                            cst = a->first ;
                            nd = a->second;

                            s.erase(a);
                            if(visited[nd]) continue;

                            dist[nd] = cst ;
                            visited[nd] = 1 ;


                            for ( auto p  : adj[nd] ){
                                if(!visited[p.first] && dist[p.first] > dist[nd]+p.second ){

                                    dist[p.first] = dist[nd]+p.second ;
                                    s.insert ( { dist[nd]+p.second , p.first });
                                    par[p.first] = nd ;

                                    }
                                }
                            }

                          if( dist[node] == INF ) cout<<"-1"<<endl;
                          else {
                              path_print ( par , node );
                              cout<<node<<endl;
                          }

                    return 0;
                    }


